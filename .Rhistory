sub("^([^-]*-[^-]*).*", "\\1", x)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
gsub
x)
gsub("[A-Z][1-9]:", "", x)
gsub("[-][1-9]:", "", x)
?sub
sub("^([^\\]*\\[^\\]*).*", "\\2", x)
sub("^([^\\]*\\[^\\]*).*", "\\1", x)
source('~/.active-rstudio-document', echo=TRUE)
x <- c("aa\bbb\cccc\ssss", "aa\vvv\vv", "aa\ddd")
sub("^([^\\]*\\[^\\]*).*", "\\1", x)
source('~/.active-rstudio-document', echo=TRUE)
x <- c("aa\bbb\cccc\ssss", "aa\vvv\vv", "aa\ddd")
sub("^([^\\]*).*", "\\1", x)
x <- c("aa\bbb\cccc\ssss", "aa\vvv\vv", "aa\ddd")
sub("^([^\\]*).*", "\\1", x)
sub("^([^\\]*).*", "\1", x)
sub("^([^\\]*).*", "\\", x)
sub("^([^\\]*).*", "\\3", x)
sub("^([^\\]*).*", "\\2", x)
sub("^([^\\]*-[^-]*).*", "\\2", x)
sub("^([^\\]*-[^\\]*).*", "\\2", x)
sub("^([^\\]*-[^\\]*).*", "\\1", x)
sub("^([^-]*-[^\\]*).*", "\\1", x)
x <- c("aa\\bbb\cccc\ssss", "aa\vvv\vv", "aa\ddd")
sub("^([^\\]*-[^\\]*).*", "\\1", x)
sub("\\\\.*", "", x)
sub("\\.*", "", x)
sub("\\\\\.*", "", x)
sub("\\\\.*", "", x)
x <- c("aa\bbb\cccc\ssss", "aa\vvv\vv", "aa\ddd")
c("aa\bbb\cccc\ssss", "aa\vvv\vv", "aa\ddd")
x <- c("aa\\bbb\\cccc\\ssss", "aa\\vvv\\vv", "aa\\ddd")
sub("\\\\.*", "", x)
sub("\\\\\.*", "", x)
sub("\\.*", "", x)
sub("\\\.*", "", x)
sub("\\\\.*", "", x)
strssplit(x,  "\\\\")
sub(".*\\\\", "", x)
x <- c("aa\\bbb\\cccc\\ssss")
sub(".*\\\\", "", x)
sub(".*\\\\\\", "", x)
sub(".*\\\\", "", x)
x <- c("aa\\bbb\\cccc\\ssss")
sub(".*\\\\", "", x)
x <- c("aa\\bbb\\cccc\\ssss\\vvv")
sub(".*\\\\", "", x)
sub(".*\\", "", x)
sub(".*\\\\\\", "", x)
sub(".*\\\\", "", x)
sub(".*\\\\", "\\1", x)
sub(".*\\\\", "\\2", x)
sub(".*\\\\", "\2", x)
sub(".*\", "", x)
sub(".*\\", "", x)
sub(".*\\\\", "", x)
# Fitting SVR to the dataset
# install.packages('e1071')
library(e1071)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression',
kernel = 'radial')
install.packages("e1071")
shiny::runApp('GitHub/knitr_report')
runApp('GitHub/knitr_report')
runApp('GitHub/knitr_report')
runApp('GitHub/knitr_report')
shiny::runApp('C:/Users/U04992212/Desktop/CTL/ASIS/Shiny_ASIS/dashboard')
runApp('GitHub/knitr_report')
A <- diag(1)
A
(I <- diag(5))
all(I == solve(I))
det(I)
data(mtcars)
data <- mtcars
names(data)
str(data))
str(data)
rm(list=ls())
theta <- 2
x <- rexp(theta)
#method of moments
theta <- mean(x)
theta <- 2
x <- rexp(theta)
#method of moments
(theta_hat <- mean(x))
theta <- 5
x <- rexp(theta)
#method of moments
(theta_hat <- mean(x))
theta <- 5
x <- rexp(theta)
#method of moments
(theta_hat <- mean(x))
x <- rexp(1/theta)
#method of moments
(theta_hat <- mean(x))
x <- rexp(theta)
#method of moments
(theta_hat <- mean(x))
rexp
x <- rexp(1000,theta)
#method of moments
(theta_hat <- mean(x))
x <- rexp(1000,1/theta)
#method of moments
(theta_hat <- mean(x))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
theta <- 2
x <- rexp(1000,1/theta)
#method of moments
(theta_hat <- mean(x))
plot(density(x))
?cureve
curve
?curve
curve(dexp,-0.1,10)
curve(dexp,-0.1,10,add=TRUE)
curve(dexp,-0.1,10,add=TRUE)
curve(dexp,rate=0.2,-0.1,10,add=TRUE)
?curve
dexp
curve(dexp(rate=0.2),-0.1,10,add=TRUE)
curve(function(x) dexp(x,rate=0.2),-0.1,10,add=TRUE)
curve(function(x) dexp(x,rate=0.2),-0.1,10,add=TRUE)
curve(function(x) dexp(x),-0.1,10,add=TRUE)
curve(function(x) dexp(x),-0.1,10)
chippy <- function(x) sin(cos(x)*exp(-x/2))
curve(chippy, -8, 7, n = 2001)
chippy <-
curve(function(x) sin(cos(x)*exp(-x/2)), -8, 7, n = 2001)
chippy <-
curve({function(x) sin(cos(x)*exp(-x/2))}, -8, 7, n = 2001)
chippy <-
curve({function(x) sin(cos(x)*exp(-x/2))}, -8, 7)
lines(dexp(x,0.2))
dexp
curve(dexp(x,rate=0.2),0,10)
plot(density(x))
curve(dexp(x,rate=0.2),0,10)
curve(dexp(x,rate=0.2),0,10,add=TRUE)
plot(density(x))
curve(dexp(x,rate=0.2),0,10,add=TRUE)
curve(dexp(x,rate=1/theta_hat),0,10,add=TRUE)
curve(dexp(x,rate=1/theta_hat),-1,10,add=TRUE)
plot(density(x),ylim=c(0,0.3))
plot(density(x),ylim=c(0,0.5))
curve(dexp(x,rate=1/theta_hat),-1,10,add=TRUE)
plot(density(x),ylim=c(0,0.5),lwd=2)
curve(dexp(x,rate=1/theta_hat),-1,10,add=TRUE,col=2,lwd=2,lty=2)
plot(ecdf(x))
curve(pexp(x,rate=1/theta_hat),lwd=2,lty=2,col=2)
plot(ecdf(x))
curve(pexp(x,rate=1/theta_hat),lwd=2,lty=2,col=2,add=TRUE)
plot(ecdf(x),lwd=4)
curve(pexp(x,rate=1/theta_hat),lwd=4,lty=2,col=2,add=TRUE)
plot(density(x),ylim=c(0,0.5),lwd=2,xlim=c(0,10))
curve(dexp(x,rate=1/theta_hat),-1,10,add=TRUE,col=2,lwd=2,lty=2)
hist(x)
hist(x,probability = TRUE)
curve(dexp(x,rate=1/theta_hat),-1,10,add=TRUE,col=2,lwd=2,lty=2)
curve(dexp(x,rate=1/3),-1,10,add=TRUE,col=2,lwd=2,lty=2)
plot(ecdf(x),lwd=4)
curve(pexp(x,rate=1/theta_hat),lwd=4,lty=2,col=2,add=TRUE)
rm(list=ls)
rm(list=ls())
theta <- 2
x <- rexp(200,1/theta)
plot(x)
plot(x)
plot(x)
mom_theta <- mean(x)
source('~/.active-rstudio-document', echo=TRUE)
mom_theta
theta <- 5
x <- rexp(200,1/theta)
plot(x)
mom_theta <- mean(x)
(mom_theta <- mean(x))
plot(ecdf(x))
curve(pexp(x,rate=1/mom_theta),0,30)
plot(ecdf(x))
curve(pexp(x,rate=1/mom_theta),
0,30,add=TRUE,col=2)
hist(x)
hist(x,probability = TRUE)
curve(dexp(x,rate=mom_theta),0,30,col="brown")
hist(x,probability = TRUE)
curve(dexp(x,rate=mom_theta),
0,30,col="brown",add=TRUE)
curve(dexp(x,rate=1/mom_theta),
0,30,col="brown",add=TRUE)
hist(x,probability = TRUE)
curve(dexp(x,rate=1/mom_theta),
0,30,col="brown",add=TRUE)
curve(dexp(x,rate=1/10),
0,30,col="blue",lwd=3,add=TRUE)
x <- rnorm(x,0,1)
x <- rnorm(100,0,1)
objfunc <- function (x) {y = x^2; return (y)}
optim (1, objfunc )
optim (1, objfunc , method =" Brent ",lower = -100 , upper =100)
optim (1, objfunc , method ="Brent",lower = -100 , upper =100)
optim (1, objfunc )
optim (1, objfunc , method ="Brent",lower = -100 , upper =100)
optim (1, objfunc)
-8.881784e-16^2
-8.881784e-16^2+1
-3.552714e-15+1
objfunc <- function (x) {y = x^2 + 1; return (y)}
optim (1, objfunc)
optim (1, objfunc , method ="Brent",lower = -100 , upper =100)
9.934104e-09^2 + 1
objfunc <- function (x) {y = x^2 - 1; return (y)}
optim (1, objfunc)
objfunc <- function (x) {y = (sin (x)+ log (x) -1) ^2; return (y)}
optim (1, objfunc , method ="Brent",lower =0, upper =pi/2)
(sin(1.109956) + log(x) - 1)^2
(sin(1.109956) + log(1.109956) - 1)^2
2.554239e-13+1
1
optim (c(1,1), objfunc )
####Weibul
objfunc <- function (x) {
logLike = sum(log(dnorm(x,shape=theta[1],sigma=theta[2])));
return (-logLike)
}
optim (c(1,1), objfunc )
####Weibul
objfunc <- function (x,theta) {
logLike = sum(log(dnorm(x,shape=theta[1],sigma=theta[2])));
return (-logLike)
}
optim (c(1,1), objfunc )
dnorm
####Weibul
objfunc <- function (x,theta) {
logLike = sum(log(dnorm(x,mean=theta[1], sd=theta[2])));
return (-logLike)
}
optim (c(1,1), objfunc )
x <- rnorm(100,mean=2,sd=3)
####normal
objfunc <- function (x,theta) {
logLike = sum(log(dnorm(x,mean=theta[1], sd=theta[2])));
return (-logLike)
}
optim (c(1,1), objfunc,x=x)
####Bounds
optim (0.2, objfunc , method ="Brent",lower = -100 , upper =100)
objfunc <- function (x) {y = x^2; return (y)}
####One parameter
optim (0.2, objfunc)
####Bounds
optim (0.2, objfunc , method ="Brent",lower = -100 , upper =100)
####Say we want a solution to the equation sin(x) + ln(x) = 1
objfunc <- function (x) {y = (sin (x)+ log (x) - 1)^2; return (y)}
optim (1, objfunc , method ="Brent",lower =0, upper =pi/2)
####Say we want a solution to the equation sin(x) + ln(x) = 1
objfunc <- function (x) {y = (sin (x)+ log (x) - 1); return (y)}
optim (1, objfunc , method ="Brent",lower =0, upper =pi/2)
sin (6.140077e-09)+ log (6.140077e-09) - 1
####Say we want a solution to the equation ln(x) = 1
objfunc <- function (x) {y = (log (x) - 1); return (y)}
optim (1, objfunc , method ="Brent",lower =0, upper =pi/2)
log (6.140077e-09)
####Say we want a solution to the equation ln(x) = 1
objfunc <- function (x) {y = (log (x) - 1)^2; return (y)}
optim (1, objfunc , method ="Brent",lower =0, upper =pi/2)
log (1.570796) - 1
####Weibull distribution
dweibull
?dweibull
x <- rweibull(100,shape=2,scale=3)
####Weibull distribution
#shape = beta, and scale = theta
objfunc <- function (x,theta) {
logLike = sum(log(dweibull(x,shape=theta[1], sd=scale[2])));
return (-logLike)
}
optim (c(1,1), objfunc,x=x)
x <- rweibull(100,shape=2,scale=3)
####Weibull distribution
#shape = beta, and scale = theta
objfunc <- function (x,theta) {
logLike = sum(log(dweibull(x,shape=theta[1], scale=theta[2])));
return (-logLike)
}
optim (c(1,1), objfunc,x=x)  #c(1,1) are starting values
mean(x)
optim (c(1,1), objfunc,x=x)  #c(1,1) are starting values
var(x)
sd(var(x))
sqrt(var(x))
sqrt(var(x)/100)
sqrt(var(x))
####Normal distribution
x <- rnorm(100,mean=2,sd=3)
####normal
objfunc <- function (x,theta) {
logLike = sum(log(dnorm(x,mean=theta[1], sd=theta[2])));
return (-logLike)
}
optim (c(1,1), objfunc,x=x)  #c(1,1) are starting values
mean(x)
sqrt(var(x))
dens = 2*theta^2 * x^-3
curve(0.5,5,function(theta) log(theta))
curve(0.5,5,function(x) log(x))
curve(function(x) log(x),0.5,5)
curve(function(x) log(x),2,5)
curve(log(x),2,5)
curve(log(x),0,5)
curve(log(x),-1,5)
curve(log(x),-1,5)
curve(log(x),0,5)
curve(log(x),0,5)
curve(log(x),0,5)
curve(x^2, -2,2)
#optimization
objfunc <- function (x) {y = x^2; return (y)}
####One parameter
optim (0.2, objfunc)
-1.665335e-16+1
-1.665335e-16 + 1
####Normal distribution
x <- rnorm(100,mean=2,sd=3)
x
x
(mu <- mean(x))
(sd_est <- sqrt(var(x)))
####normal
objfunc <- function (x,theta) {
logLike = sum(log(dnorm(x,mean=theta[1], sd=theta[2])));
return (-logLike)
}
optim (c(1,1), objfunc,x=x)  #c(1,1) are starting values
min(c(1,2,3))
source('~/.active-rstudio-document', echo=TRUE)
cat("bias of", bquote(bar(x)),"=",mean(estimates1))
bquote(bar(x))
cat("bias of X_bar=",mean(estimates1),"\nbias of nY_1=",mean(estimates2))
cat("bias of X_bar=",mean(estimates1-theta),"\nbias of nY_1=",mean(estimates2-theta))
plot(estimates1)
plot(estimates1)
source('~/.active-rstudio-document', echo=TRUE)
rexp(1/theta)
x <- rexp(1/theta)
x
theta
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(estimates1)
cat("bias of X_bar=",mean(estimates1-theta),"\nbias of nY_1=",mean(estimates2-theta))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
cat("bias of X_bar=",mean(estimates1-theta),"\nbias of nY_1=",mean(estimates2-theta))
source('~/.active-rstudio-document', echo=TRUE)
plot(estimates1)
lines(estimates2,type="p",col=2)
plot(estimates2)
lines(estimates2,type="p",col=2)
plot(estimates1)
lines(estimates2,type="p",col=2)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(estimator1)
plot(estimator1)
plot(estimator1)
x11()
plot(estimator1)
x11()
plot(estimator1)
lines(estimator2,col=2)
x11()
plot(estimator1)
lines(estimator2,col=2,type="p")
x11()
plot(estimator1)
lines(estimator2,col=2,type="p",lwd=4)
x11()
plot(estimator2)
lines(estimator1,col=2,type="p",lwd=4)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(estimator1)
var(estimator)
var(estimator1)
theta^2/n
theta <- 2
estimator1 <- estimator2 <- matrix(NA,nrow=nsim,ncol=n)
nsim <- 1000
n <- 1000
for(j in 1:n){
for(i in 1:nsim){
x <- rexp(j,1/theta)
estimator1[i,j] <- mean(x)
}
}
x <- rexp(j,1/theta)
estimator1[i,j] <- mean(x)
estimator1[i,j]
i
j
theta <- 2
estimator1 <- estimator2 <- matrix(NA,nrow=nsim,ncol=n)
nsim <- 1000
n <- 1000
for(j in 1:n){
for(i in 1:nsim){
x <- rexp(j,1/theta)
estimator1[i,j] <- mean(x)
}
}
nsim <- 1000
n <- 100
for(j in 1:n){
for(i in 1:nsim){
x <- rexp(j,1/theta)
estimator1[i,j] <- mean(x)
}
}
estimator1
apply(estimator1,2,mean)
head(estimator1)
estimator1[1]
estimator1[1,]
plot(estimator1[1,])
estimator1[,1]
theta <- 2
nsim <- 500
n <- 100
estimator1 <- estimator2 <- matrix(NA,nrow=nsim,ncol=n)
for(j in 1:n){
for(i in 1:nsim){
x <- rexp(j,1/theta)
estimator1[i,j] <- mean(x)
}
}
apply(estimator1,2,mean)
apply(estimator1,2,mean)
apply(estimator1,1,mean)
sim_avg <- apply(estimator1,1,mean)
plot(sim_avg)
sim_avg <- apply(estimator1,1,mean)
sim_avg <- apply(estimator1,1,mean)
plot(sim_avg)
sim_avg <- apply(estimator1,2,mean)
plot(sim_avg)
sim_var <- apply(estimator1,2,var)
plot(sim_var)
abline(h =theta^2/n)
plot(sim_var,xlab="n",type="l")
abline(h =theta^2/n)
plot(sim_var,xlab="n",type="l",lwd=3)
abline(h =theta^2/n)
abline(h =theta^2/n,lty=2)
plot(sim_var,xlab="n",type="l",lwd=3)
abline(h =theta^2/n,lty=2)
abline(h =theta^2/1,lty=2)
lines(theta^2/(1:n),lty=2)
theta^2/(1:n)
length(theta^2/(1:n))
length(sim_var)
plot(sim_var,xlab="n",type="l",lwd=3)
lines(theta^2/(1:n),lty=2)
plot(theta^2/(1:n),lty=2)
plot(sim_var,xlab="n",type="l",lwd=3)
lines(theta^2/(1:n),lty=2,col=2,lwd=2)
for(j in 1:n){
for(i in 1:nsim){
x <- rexp(j,1/theta)
estimator1[i,j] <- mean(x)
estimator2[i,j] <- j*min(x)
}
}
sim_var <- apply(estimator1,2,var)
plot(sim_var,xlab="n",type="l",lwd=3)
lines(theta^2/(1:n),lty=2,col=2,lwd=2)
sim_var2 <- apply(estimator2,2,var)
plot(sim_var2,xlab="n",type="l",lwd=3,col=3)
sim_var <- apply(estimator1,2,var)
plot(sim_var,xlab="n",type="l",lwd=3)
lines(theta^2/(1:n),lty=2,col=2,lwd=2)
sim_var2 <- apply(estimator2,2,var)
lines(sim_var2,xlab="n",type="l",lwd=3,col=3)
sim_mean <- apply(estimator1,2,mean)
plot(sim_mean,xlab="n",type="l",lwd=3)
abline(h=theta,lty=2,col=2,lwd=2)
sim_mean2 <- apply(estimator2,2,mean)
lines(sim_mean2,xlab="n",type="l",lwd=3,col=3)
shiny::runApp('GitHub/knitr_report/knitr_report')
setwd("~/GitHub/knitr_report/knitr_report")
runApp()
runApp()
runApp()
